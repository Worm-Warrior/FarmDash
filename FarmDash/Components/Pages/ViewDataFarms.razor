@attribute [Authorize]
@page "/ViewDataFarms"
@using FarmDash.Controllers
@using FarmDash.Models
@using FarmDash.Services
@using Microsoft.AspNetCore.Authorization
@inject FarmServices FarmServices
@rendermode InteractiveServer

<PageTitle>Data View</PageTitle>

<h1>Data View</h1>

<p>The current farms in the database.</p>
<div class="card border-primary border-5 mb-3 shadow">
    <p class="m-1">Use "attribute:value" to search for a specific value in an attribute. EX: "FarmID:100".</p>
    <p class="m-1">General search will select every entry that CONTAINS the search term. Exact will only select entries that are EQUAL to the search term.</p>
    <p class="m-1">You can combine General and Exact search with the "attribute:value" feature to get even more specific with your search.</p>
</div>
    @if (allFarms == null)
{
    
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="row mb-3">
        <div class="col-md-8">
            <p>Search database</p>
            <div class="d-flex">
                <input class="form-control-sm" @bind="searchBox" @onkeydown="HandleKeyPress"/>
                <button style="" class="btn btn-primary btn-success ms-2" @onclick="() => search(searchBox)">Search</button>
                @if (!exact)
                {
                    <button class="btn btn-primary btn-success btn-outline-dark ms-2" @onclick="() => ToggleExact()">General Search</button>
                }
                else
                {
                    <button class="btn btn-primary btn-success btn-outline-dark ms-2" @onclick="() => ToggleExact()">Exact Search</button>
                }
            </div>
        </div>
        <div class="col-md-4 text-end">
            <p>Show per page:</p>
            <select class="form-select" @onchange="PageSizeChanged" style="width: auto; display: inline-block">
                <option value="10" selected="@(pageSize == 10)">10</option>
                <option value="25" selected="@(pageSize == 25)">25</option>
                <option value="50" selected="@(pageSize == 50)">50</option>
                <option value="100" selected="@(pageSize == 100)">100</option>
            </select>
        </div>
    </div>
    
    <div class="row mb-3">
        <div class="col">
            <p class="text-muted">
                Showing @(GetFirstRecord())-@(GetLastRecord()) of @filteredFarms.Count farms
                @if (totalPages > 1)
                {
                    <span>(Page @currentPage of @totalPages)</span>
                }
            </p>
        </div>
    </div>
    
    <table class="table ms-sm-auto">
        <thead>
        <tr>
            <th class="sortable-header"  style="cursor: pointer; padding: 0.5rem; user-select: none;" 
                @onclick="() => SortBy(FarmID)">FarmID @(curSortCol == "FarmID" ? (sortAscend ? "▲" : "▼") : "")</th>
            <th class="sortable-header"  style="cursor: pointer; padding: 0.5rem; user-select: none;" 
                @onclick="() => SortBy(name)">Name @(curSortCol == "Name" ? (sortAscend ? "▲" : "▼") : "")</th>
            <th class="sortable-header"  style="cursor: pointer; padding: 0.5rem; user-select: none;" 
                @onclick="() => SortBy(Location)">Location @(curSortCol == "Location" ? (sortAscend ? "▲" : "▼") : "")</th>
            <th class="sortable-header"  style="cursor: pointer; padding: 0.5rem; user-select: none;" 
                @onclick="() => SortBy(Description)">Description @(curSortCol == "Description" ? (sortAscend ? "▲" : "▼") : "")</th>
            <th class="sortable-header"  style="cursor: pointer; padding: 0.5rem; user-select: none;" 
                @onclick="() => SortBy(Animal)">Animal @(curSortCol == "Animal" ? (sortAscend ? "▲" : "▼") : "")</th>
            <th class="sortable-header"  style="cursor: pointer; padding: 0.5rem; user-select: none;" 
                @onclick="() => SortBy(DeathRate)">Death Rate (per 1k) @(curSortCol == "DeathRate" ? (sortAscend ? "▲" : "▼") : "")</th>
            <th class="sortable-header"  style="cursor: pointer; padding: 0.5rem; user-select: none;" 
                @onclick="() => SortBy(SickRate)">Sick Rate (per 1k) @(curSortCol == "SickRate" ? (sortAscend ? "▲" : "▼") : "")</th>
            <th class="sortable-header"  style="cursor: pointer; padding: 0.5rem; user-select: none;" 
                @onclick="() => SortBy(State)">State @(curSortCol == "State" ? (sortAscend ? "▲" : "▼") : "")</th>
            <th class="sortable-header"  style="cursor: pointer; padding: 0.5rem; user-select: none;" 
                @onclick="() => SortBy(Created)">Created @(curSortCol == "Created" ? (sortAscend ? "▲" : "▼") : "")</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        
        @foreach (var farm in GetCurrentPageFarms())
        {
            if (editingFarm?.Id == farm.Id)
            {
                <tr>
                    <td><input @bind="editingFarm.FarmID" class="form-control" /></td>
                    <td><input @bind="editingFarm.Name" class="form-control" /></td>
                    <td><input @bind="editingFarm.Location" class="form-control" /></td>
                    <td><input @bind="editingFarm.Description" class="form-control" /></td>
                    <td><input @bind="editingFarm.Animal" class="form-control" /></td>
                    <td><input @bind="editingFarm.DeathRate" type="number" class="form-control" /></td>
                    <td><input @bind="editingFarm.SickRate" type="number" class="form-control" /></td>
                    <td><input @bind="editingFarm.State" class="form-control" /></td>
                    <td>@farm.Created</td>
                    <td>
                        <button class="btn btn-sm btn-success m-1" @onclick="() => SaveEdit(farm.Id)">Save</button>
                        <button class="btn btn-sm btn-secondary m-1" @onclick="CancelEdit">Cancel</button>
                    </td>
                </tr>
            }
            else if (deleteMenu)
            {
                <tr>
                    <td>@farm.FarmID</td>
                    <td>@farm.Name</td>
                    <td>@farm.Location</td>
                    <td>@farm.Description</td>
                    <td>@farm.Animal</td>
                    <td>@farm.DeathRate</td>
                    <td>@farm.SickRate</td>
                    <td>@farm.State</td>
                    <td>@farm.Created</td>
                    <td>
                        <button class="btn btn-sm btn-danger m-1" @onclick="() => DeleteFarm(farm)">Confirm Delete</button>
                        <button class="btn btn-sm btn-secondary m-1" @onclick="DeleteCancel">Cancel</button>
                    </td>
                </tr>
            }
            else
            {
                <tr>
                    <td>@farm.FarmID</td>
                    <td>@farm.Name</td>
                    <td>@farm.Location</td>
                    <td>@farm.Description</td>
                    <td>@farm.Animal</td>
                    <td>@farm.DeathRate</td>
                    <td>@farm.SickRate</td>
                    <td>@farm.State</td>
                    <td>@farm.Created</td>
                    <td>
                        <button class="btn btn-sm btn-primary btn-outline-info m-1" @onclick="() => StartEdit(farm)">Edit</button>
                        <button class="btn btn-sm btn-primary btn-warning m-1" @onclick="StartDelete">Delete</button>
                    </td>
                </tr>
            }
        }

        </tbody>
    </table>
    
    @if (totalPages >= 1)
    {
        <nav aria-label="Farm pageation">
            <ul class="pagination justify-content-center">
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="() => GotoPage(1)" disabled="@(currentPage == 1)">First</button>
                </li>
                
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="() => GotoPage(currentPage-1)" disabled="@(currentPage == 1)">Prev</button>
                </li>
                @{
                    var startPage = Math.Max(1, currentPage - 2);
                    var endPage = Math.Min(totalPages, currentPage + 2);
                }
                
                @for (int i = startPage; i <= endPage; i++)
                {
                    var pageNumber = i;
                    <li class="page-item @(i == currentPage ? "active" : "")">
                        <button class="page-link" @onclick="() => GotoPage(pageNumber)">@i</button>
                    </li>   
                }

                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="() => GotoPage(currentPage+1)" disabled="@(currentPage == totalPages)">Next</button>
                </li>
                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="() => GotoPage(totalPages)" disabled="@(currentPage == totalPages)">Last</button>
                </li>
            </ul>
        </nav>
    }
}

@code {
    // General variables
    private List<Farm>? allFarms;
    static List<Farm> filteredFarms = new();
    
    // Page variables
    private int currentPage = 1;
    private static int pageSize = 10;
    private int totalPages = (int)Math.Ceiling((double)filteredFarms.Count / pageSize);
    private int jumpToPage = 1;
    
    // Edit and delete variables
    private Farm? editingFarm;
    private bool deleteMenu = false;
 
    // Sort variables
    private String curSortCol = "";
    private Boolean sortAscend = true;

    // Search variables
    private string id = "ID";
    private const string name = "Name";
    private const string FarmID = "FarmID";
    private const string Location = "Location";
    private const string Description = "Description";
    private const string Animal = "Animal";
    private const string DeathRate = "DeathRate";
    private const string SickRate = "SickRate";
    private const string State = "State";
    private const string Created = "Created";

    private string searchBox = "";
    private bool exact = false;

    protected override async Task OnInitializedAsync()
    {
        allFarms = await FarmServices.GetFarmsListAsync();
    }
    
    // Page methods
    //TODO:(FIX BUG) Either this function or the search function is broken when both first loading the page (it is blank)
    // and when searching from hitting enter on keyboard breaks the search.
    private List<Farm> GetCurrentPageFarms()
    {
        var start = (currentPage - 1) * pageSize;
        return filteredFarms.Skip(start).Take(pageSize).ToList();
    }

    private int GetFirstRecord()
    {
        if (filteredFarms.Count == 0)
        {
            return 0;
        }
        return (currentPage - 1) * pageSize + 1;
    }
    
    private int GetLastRecord()
    {
        var endRecord = currentPage * pageSize;
        return Math.Min(endRecord, filteredFarms.Count);
    }

    private void GotoPage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            StateHasChanged();
        }
    }

    private void JumpToPage()
    {
        if (jumpToPage >= 1 && jumpToPage <= totalPages)
        {
            currentPage = jumpToPage;
            StateHasChanged();
        }
    }

    //NOTE: think I fixed the navbar pages not updating.
    // Had to make it so that totalPages updates every time we change page count (duh).
    private void PageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var newPageSize))
        {
            pageSize = newPageSize;
            currentPage = 1; // Reset to first page
            totalPages = (int)Math.Ceiling((double)filteredFarms.Count / pageSize);
            // Ensure current page doesn't exceed new total pages
            StateHasChanged();
            Console.WriteLine(pageSize + " " + newPageSize);
        }
    }
    

    // Search methods

    //TODO: I think this function is causing issues with the search feature, gives bad search results when
    // using enter key instead of button.
    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await search(searchBox);
        }
    }

    private void ToggleExact()
    {
        exact = !exact;
        //TODO: remove later
        Console.WriteLine(exact);
    }

    private async Task search(string searchString)
    {
        
        Console.WriteLine(searchString);
        if (String.IsNullOrWhiteSpace(searchString))
        {
            filteredFarms = new List<Farm>(allFarms ?? new List<Farm>());
        }
        else
        {
            filteredFarms = (allFarms ?? new List<Farm>()).Where(f => MatchesSearch(f)).ToList();
        }

        currentPage = 1;
        StateHasChanged();
    }

    private bool MatchesSearch(Farm f)
    {
        if (searchBox == null || !searchBox.Contains(":", StringComparison.OrdinalIgnoreCase) && !exact)
        {
            return
                f.FarmID.ToString().Contains(searchBox, StringComparison.OrdinalIgnoreCase) ||
                f.Name.Contains(searchBox, StringComparison.OrdinalIgnoreCase) ||
                f.Location.Contains(searchBox, StringComparison.OrdinalIgnoreCase) ||
                f.Description.Contains(searchBox, StringComparison.OrdinalIgnoreCase) ||
                f.Animal.Contains(searchBox, StringComparison.OrdinalIgnoreCase) ||
                f.DeathRate.ToString().Contains(searchBox, StringComparison.OrdinalIgnoreCase) ||
                f.SickRate.ToString().Contains(searchBox, StringComparison.OrdinalIgnoreCase) ||
                f.State.Contains(searchBox, StringComparison.OrdinalIgnoreCase) ||
                f.Created.ToString().Contains(searchBox, StringComparison.OrdinalIgnoreCase);
        }

        if (!searchBox.Contains(":", StringComparison.OrdinalIgnoreCase) && exact)
        {
            return
                f.FarmID.ToString().Equals(searchBox, StringComparison.OrdinalIgnoreCase) ||
                f.Name.Equals(searchBox, StringComparison.OrdinalIgnoreCase) ||
                f.Location.Equals(searchBox, StringComparison.OrdinalIgnoreCase) ||
                f.Description.Equals(searchBox, StringComparison.OrdinalIgnoreCase) ||
                f.Animal.Equals(searchBox, StringComparison.OrdinalIgnoreCase) ||
                f.DeathRate.ToString().Equals(searchBox, StringComparison.OrdinalIgnoreCase) ||
                f.SickRate.ToString().Equals(searchBox, StringComparison.OrdinalIgnoreCase) ||
                f.State.Equals(searchBox, StringComparison.OrdinalIgnoreCase) ||
                f.Created.ToString().Equals(searchBox, StringComparison.OrdinalIgnoreCase);
        }

        string[] parts = searchBox.Split(":", 2);
        string field = parts[0].Trim();
        string data = parts[1].Trim();

        if (!exact)
        {
            switch (field.ToLower())
            {
                case "farmid":
                    return f.FarmID.ToString().Contains(data, StringComparison.OrdinalIgnoreCase);
                case "name":
                    return f.Name.Contains(data, StringComparison.OrdinalIgnoreCase);
                case "location":
                    return f.Location.Contains(data, StringComparison.OrdinalIgnoreCase);
                case "description":
                    return f.Description.Contains(data, StringComparison.OrdinalIgnoreCase);
                case "animal":
                    return f.Animal.Contains(data, StringComparison.OrdinalIgnoreCase);
                case "deathrate":
                    return f.DeathRate.ToString().Contains(data, StringComparison.OrdinalIgnoreCase);
                case "sickrate":
                    return f.SickRate.ToString().Contains(data, StringComparison.OrdinalIgnoreCase);
                case "state":
                    return f.State.Contains(data, StringComparison.OrdinalIgnoreCase);
                case "created":
                    return f.Created.ToString().Contains(data, StringComparison.OrdinalIgnoreCase);
                default:
                    Console.WriteLine("COULD NOT FIND FIELD TO FILTER SEARCH");
                    return false;
            }
        }
        else
        {
            switch (field.ToLower())
            {
                case "farmid":
                    return f.FarmID.ToString().Equals(data, StringComparison.OrdinalIgnoreCase);
                case "name":
                    return f.Name.Equals(data, StringComparison.OrdinalIgnoreCase);
                case "location":
                    return f.Location.Equals(data, StringComparison.OrdinalIgnoreCase);
                case "description":
                    return f.Description.Equals(data, StringComparison.OrdinalIgnoreCase);
                case "animal":
                    return f.Animal.Equals(data, StringComparison.OrdinalIgnoreCase);
                case "deathrate":
                    return f.DeathRate.ToString().Equals(data, StringComparison.OrdinalIgnoreCase);
                case "sickrate":
                    return f.SickRate.ToString().Equals(data, StringComparison.OrdinalIgnoreCase);
                case "state":
                    return f.State.Equals(data, StringComparison.OrdinalIgnoreCase);
                case "created":
                    return f.Created.ToString().Equals(data, StringComparison.OrdinalIgnoreCase);
                default:
                    Console.WriteLine("COULD NOT FIND FIELD TO FILTER SEARCH");
                    return false;
            }
        }
    }

    // sort methods
    
    //TODO: FIX DEFAULT CASE WHEN HITTING ENTER
    private void SortFarms()
    {
        switch (curSortCol)
        {
            case "FarmID":
                filteredFarms = sortAscend ? filteredFarms.OrderBy(f => f.FarmID).ToList() : 
                    filteredFarms.OrderByDescending(f => f.FarmID).ToList();
                break;
            case "Name":
                filteredFarms = sortAscend ? filteredFarms.OrderBy(f => f.Name).ToList() : 
                    filteredFarms.OrderByDescending(f => f.Name).ToList();
                break;
            case "Location":
                filteredFarms = sortAscend ? filteredFarms.OrderBy(f => f.Location).ToList() : 
                    filteredFarms.OrderByDescending(f => f.Location).ToList();
                break;
            case "Description":
                filteredFarms = sortAscend ? filteredFarms.OrderBy(f => f.Description).ToList() : 
                    filteredFarms.OrderByDescending(f => f.Description).ToList();
                break;
            case "Animal":
                filteredFarms = sortAscend ? filteredFarms.OrderBy(f => f.Animal).ToList() : 
                    filteredFarms.OrderByDescending(f => f.Animal).ToList();
                break;
            case "DeathRate":
                filteredFarms = sortAscend ? filteredFarms.OrderBy(f => f.DeathRate).ToList() : 
                    filteredFarms.OrderByDescending(f => f.DeathRate).ToList();
                break;
            case "SickRate":
                filteredFarms = sortAscend ? filteredFarms.OrderBy(f => f.SickRate).ToList() : 
                    filteredFarms.OrderByDescending(f => f.SickRate).ToList();
                break;
            case "State":
                filteredFarms = sortAscend ? filteredFarms.OrderBy(f => f.State).ToList() : 
                    filteredFarms.OrderByDescending(f => f.State).ToList();
                break;
            case "Created":
                filteredFarms = sortAscend ? filteredFarms.OrderBy(f => f.Created).ToList() : 
                    filteredFarms.OrderByDescending(f => f.Created).ToList();
                break;
            default:
                Console.WriteLine("DEFAULT CASE REACHED IN SortFarms() ERROR...\n");
                break;
        }
    }

    private void SortBy(string filter)
    {
        if (curSortCol == filter)
        {
            sortAscend = !sortAscend;
        }
        else
        {
            curSortCol = filter;
            sortAscend = true;
        }
        SortFarms();
    }
    
    // Delete and edit methods
    private void DeleteCancel()
    {
        deleteMenu = false;
        StateHasChanged();
    }

    private void StartDelete()
    {
        deleteMenu = true;
        StateHasChanged();
    }

    private void StartEdit(Farm farm)
    {
        //TODO: Remove later
        Console.WriteLine($"Editing farm {farm.Id}");
        editingFarm = new Farm
        {
            Id = farm.Id,
            FarmID = farm.FarmID,
            Name = farm.Name,
            Location = farm.Location,
            Description = farm.Description,
            Animal = farm.Animal,
            DeathRate = farm.DeathRate,
            SickRate = farm.SickRate,
            State = farm.State,
            Created = farm.Created
        };

        StateHasChanged();
    }


    private void CancelEdit()
    {
        editingFarm = null;
    }

    private async Task DeleteFarm(Farm farm)
    {
        Farm delFarm = await FarmServices.GetFarmByIdAsync(farm.Id);
        if (farm != null && delFarm != null)
        {
            await FarmServices.DeleteFarmAsync(farm);
            deleteMenu = false;
        }
        else
        {
            deleteMenu = false;
        }
        // Need to reload the array list for it to update properly on the page!
        allFarms = await FarmServices.GetFarmsListAsync();
        StateHasChanged();
    }

    private async Task SaveEdit(int id)
    {
        if (editingFarm != null)
        {
            await FarmServices.UpdateFarmAsync(editingFarm);

            var index = Array.FindIndex(allFarms.ToArray(), f => f.Id == id);
            if (index >= 0)
            {
                allFarms[index] = editingFarm;
            }

            editingFarm = null;
            allFarms = await FarmServices.GetFarmsListAsync();
            StateHasChanged();
        }
    }


}
